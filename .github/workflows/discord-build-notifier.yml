name: Discord Build Notification

on:
  workflow_call:
    inputs:
      project_path:
        description: 'The path to the project to build. If present, will be displayed with the repo name.'
        required: false
        type: string
        default: '.'
      build_status:
        required: true
        type: string
      build_number:
        required: true
        type: string
      author_icon_url:
        description: |
          The URL to the author's icon to use in the Discord notification.
        required: false
        type: string
        default: 'https://avatars.githubusercontent.com/u/1390178'
    secrets:
      DISCORD_WEBHOOK:
        description: |
          The Discord webhook URL to send the build notification to.
        required: true

jobs:
  notify-discord:
    name: Notify Discord
    runs-on: ubuntu-latest
    steps:
      - name: Notify Discord
        id: notify-discord
        uses: actions/github-script@v7
        env:
          project_path: ${{ inputs.project_path }}
          build_status: ${{ inputs.build_status }}
          build_number: ${{ inputs.build_number }}
          ref_type: ${{ github.ref_type }}
          ref_name: ${{ github.ref_name }}
          author_icon_url: ${{ inputs.author_icon_url }}
          discord_webhook: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          result-encoding: string
          # language=js
          script: |-
            'use strict';
            const capitalise = (str) => str.charAt(0).toUpperCase() + str.slice(1)
            const {project_path, build_status, build_number, ref_type, ref_name, author_icon_url, discord_webhook} = process.env
            
            let title = capitalise(build_status)
            let reason
            let colour
            switch (title) {
                case 'Success':
                    colour = 2684508
                    break
                case 'Started':
                    colour = 3224808
                    break
                case 'Skipped':
                    title = 'Failure'
                    reason = 'Failed to calculate version number'
                case 'Failure':
                case 'Cancelled':
                    colour = 16071719
                    break
            }
            
            const name = project_path !== '.' ? `${context.payload.repository.name}/${project_path}` : context.payload.repository.name
            const json = {
                username: 'GitHub Actions',
                avatar_url: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png',
                embeds: [{
                    author: {
                        name: name,
                        url: context.payload.repository.html_url,
                        icon_url: `${author_icon_url}`
                    },
                    url: `${context.payload.repository.html_url}/actions/runs/${context.runId}`,
                    title: `${title}`,
                    color: `${colour}`,
                    fields: []
                }]
            }
            
            if (build_number) {
                json.embeds[0].fields.push({
                    name: 'Build number',
                    value: build_number,
                    inline: true
                })
            }
            
            json.embeds[0].fields.push({
                name: `Build ${ref_type}`,
                value: `${ref_name}`,
                inline: true
            })
            
            if (title === 'Started') {
                json.embeds[0].fields.push({
                    name: 'Commit message',
                    value: `${context.payload.head_commit.message}`
                })
            } else if (reason) {
                json.embeds[0].fields.push({
                    name: 'Reason',
                    value: `${reason}`
                })
            }
            
            const jsonString = JSON.stringify(json)
            if (await exec.exec('curl', [
                '--http2-prior-knowledge', '--tlsv1.3', '--false-start', '--tcp-fastopen', '--compressed', '-sS', '-m', '10',
                '-H', 'Content-Type: application/json',
                '--request', 'POST',
                '-d', `${jsonString}`,
                `${discord_webhook}`
            ]) !== 0) {
                core.setFailed(`Failed to send Discord notification: ${jsonString}`);
            }
